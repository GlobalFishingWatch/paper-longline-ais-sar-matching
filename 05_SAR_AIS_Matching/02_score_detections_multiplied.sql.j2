#StandardSql

    CREATE TEMP FUNCTION bilinear_interpolation(Q11 float64,
    Q12 float64, Q22 float64, Q21 float64, x1 float64, x2 float64,
    y1 float64, y2 float64, x float64, y float64) AS (
        # see https://en.wikipedia.org/wiki/Bilinear_interpolation
        # Q11 is the value at x1, y1, Q12 is the value at x1, y2, etc.
        # x and y are the coordinates we want the value for
        1/( (x2 - x1) * (y2 - y1)) *
          (
             Q11 * (x2 - x) * (y2 - y)
           + Q21 * (x - x1) * (y2 - y)
           + Q12 * (x2 - x) * (y - y1)
           + Q22 * (x - x1) * (y - y1)
          )
        );


    create temp function radians(x float64) as (
      3.14159265359 * x / 180
    );

    create temp function deglat2km() as (
      111
    );

    create temp function meters2deg() as (
       1/(deglat2km()*1000)
    );

    create temp function kilometers_per_nautical_mile() as (
      1.852
    );

    create temp function one_over_cellsize() as (
      200  -- 250 meter resolution roughly
    );

    create temp function map_label(label string)
    as (
      case when label ="drifting_longlines" then "drifting_longlines"
      when label ="purse_seines" then "purse_seines"
      when label ="other_purse_seines" then "purse_seines"
      when label ="tuna_purse_seines" then "purse_seines"
      when label ="cargo_or_tanker" then "cargo_or_tanker"
      when label ="cargo" then "cargo_or_tanker"
      when label ="tanker" then "cargo_or_tanker"
      when label ="tug" then "tug"
      when label = "trawlers" then "trawlers"
      else "other" end
    );

    create temp function map_speed(x float64) as (
      case
      when x < 2 then 0
      when x < 4 then 2
      when x < 6 then 4
      when x < 8 then 6
      when x < 10 then 8
      else 10 end
    );

    create temp function map_minutes(x float64) as (
      case when x < -384 then  -512
      when x < -256 then -384
      when x < -192 then -256
      when x < -128 then -192
      when x < -96 then -128
      when x < -64 then -96
      when x < -48 then -64
      when x < -32 then -48
      when x < -24 then -32
      when x < -16 then -24
      when x < -12 then -16
      when x < -8 then -12
      when x < -6 then -8
      when x < -4 then -6
      when x < -3 then -4
      when x < -2 then -3
      when x < -1 then -2
      when x < 0 then -1
      when x < 1 then 0
      when x < 2 then 1
      when x < 3 then 2
      when x < 4 then 3
      when x < 6 then 4
      when x < 8 then 6
      when x < 12 then 8
      when x < 16 then 12
      when x < 24 then 16
      when x < 32 then 24
      when x < 48 then 32
      when x < 64 then 48
      when x < 96 then 64
      when x < 128 then 96
      when x < 192 then 128
      when x < 256 then 192
      when x < 384 then 256
      else 384 end);





    with
    ######################################
    -- Data sources
    ######################################
    --

    prob_raster as (select * from
     `gfw_research_precursors.point_cloud_mirror_nozeroes_contour_v20190502`
     ),
    --
    --
    ##################################
    # Probability raster adjustments
    ##################################
    --
    -- get the average for general fishing. This is creating a composite category
    -- of other categories.
    probability_table as (select
       probability,labels,minutes_lower,speed_lower,i,j
    from
      prob_raster
    union all
    select
       avg(probability) probability, "fishing" labels, minutes_lower, speed_lower,i,j
    from
      prob_raster
    where labels in ("trawlers","purse_seines","drifting_longlines")
    group by
       labels,minutes_lower,speed_lower,i,j),
    --
    --


    --
    --
    -- the raster has only positive i values because it is symmetrical
    -- around the i axis (the boat is as equally likely to turn left as right).
    -- Make a full raster with negative values for the later join.
    probabilities_and_weights_neg as (
    select
    labels, minutes_lower, speed_lower, probability, i, j --, weight
    from
    probability_table
    union all
    select
    -- same except take negative i!
    labels, minutes_lower, speed_lower, probability, -i as i, j -- , weight
    from
    probability_table
    where i >0
    ),
    #########################
    ##
    ## SAR subqueries
    ##
    #########################
    --
    --


    just_bounds_label as (
--     select *,
--     pixels_per_degree*cos(radians(min_lat/2+max_lat/2)) as pixels_per_degree_lon
--     from scratch_david.temp_justbounds
   select
     ssvid,
     label,
    scene_id,
    speed1 as speed,
    course1 as course,
    scale1 as scale,
    round(max_scale*111) as pixels_per_degree,
    round(max_scale*111*cos(radians(min_lat/2+max_lat/2))) as pixels_per_degree_lon,
    min_delta_minutes,
    is_single,
    delta_minutes1 as delta_minutes,
    min_lon,
    max_lon,
    min_lat,
    max_lat,
    lat_extrapolate1 + lat_doppler_offset1 as lat_interpolate_adjusted,
    lon_extrapolate1 + lon_doppler_offset1 as lon_interpolate_adjusted,
    from {{ extrapolated_table }}
    where delta_minutes1 is not null
    union all
    select
    ssvid,
    label,
    scene_id,
    speed2 as speed,
    course2 as course,
    scale2 as scale,
    round(max_scale*111) as pixels_per_degree,
    round(max_scale*111*cos(radians(min_lat/2+max_lat/2))) as pixels_per_degree_lon,
    min_delta_minutes,
    is_single,
    delta_minutes2 as delta_minutes,
    min_lon,
    max_lon,
    min_lat,
    max_lat,
    lat_extrapolate2 + lat_doppler_offset2 as lat_interpolate_adjusted,
    lon_extrapolate2 + lon_doppler_offset2 as lon_interpolate_adjusted,
    from {{ extrapolated_table }}
    where delta_minutes2 is not null
    ),



     lat_array AS(
      SELECT
        * ,
        lat_bin/pixels_per_degree as detect_lat  -- to get the middle of the cell
      FROM
        just_bounds_label
      CROSS JOIN
        UNNEST(GENERATE_ARRAY(
               cast(FLOOR(min_lat*pixels_per_degree) as int64) - 2, -- just to pad it a bit
               cast(FLOOR(max_lat*pixels_per_degree) as int64) + 2,
               1))
         AS lat_bin
        -- where scene_id = "RS2_20190924_150552_0074_DVWF_HH_SCS_759668_9852_29818072"

         ),


      lon_array AS (
      SELECT
        *,
        lon_bin/pixels_per_degree_lon as detect_lon -- to get the middle of the cell
      FROM
        just_bounds_label
      CROSS JOIN
            UNNEST(GENERATE_ARRAY(
               cast(FLOOR(min_lon*pixels_per_degree_lon) as int64) - 2, -- just to pad it a bit
               cast(FLOOR(max_lon*pixels_per_degree_lon) as int64) + 2,
               1))  AS lon_bin

       --      where scene_id = "RS2_20190924_150552_0074_DVWF_HH_SCS_759668_9852_29818072"
),



      id_lat_lon_array AS (
      select
      a.pixels_per_degree as pixels_per_degree,
      a.pixels_per_degree_lon as pixels_per_degree_lon,
      a.min_lat,
      a.min_lon,
      a.ssvid,
      a.label,
      a.scene_id,
      a.speed,
      a.course,
      a.scale,
      a.is_single,
      a.delta_minutes,
      a.lat_interpolate_adjusted,
      a.lon_interpolate_adjusted,
      lon_bin,
      lat_bin,
      detect_lon,
      detect_lat,
      FROM
        lon_array a
      CROSS JOIN
        lat_array b
      WHERE
        a.scene_id=b.scene_id
        and a.ssvid=b.ssvid
        and a.delta_minutes = b.delta_minutes
        ),

    --
    ####################
    # joins to the probability raster
    ###################
    --


    # --
    # -- adjust by scale -- that is the probability raster will be scalled
    # -- based on how long before or after the ping the image was taken.
    # -- Also, move the raster so that 0,0 is where the vessel would be
    # -- if it traveled in a straight line.
    key_query_1 as (
    select *,
      deglat2km() * (detect_lon - lon_interpolate_adjusted) * cos(radians(lat_interpolate_adjusted)) as u,
      deglat2km() * (detect_lat - lat_interpolate_adjusted) as v,
      radians(course) as course_rads
    from
      id_lat_lon_array
    ),

    # --
    # -- rotate the coordinates
    key_query_2 as (
    select
      *,
      cos(course_rads) * u - sin(course_rads) * v as x,
      cos(course_rads) * v + sin(course_rads) * u as y,
      -- rotation of coordinates, described here: https://en.wikipedia.org/wiki/Rotation_of_axes
      -- Note that our u and v / x and y are switched from the standard way to measure
      -- this, largely because vessels measure course from due north, moving clockwise,
      -- while mosth math measures angle from the x axis counterclockwise. Annoying!
      --
      # 1000 / colmax(1.0, ABS(delta_minutes)) as scale
    #     This is the python function we are copying here:
    #      def scale(dt):
    #         return 1000.0 / max(1, abs(dt))
    from
      key_query_1
    ),
    # --
    # -- adjust by scale -- that is the probability raster will be scalled
    # -- based on how long before or after the ping the image was taken.
    # -- Also, move the raster so that 0,0 is where the vessel would be
    # -- if it traveled in a straight line.
    key_query_3 as
    (
    select * from (
      select *,
        x * scale as x_key,
        # (y - speed*kilometers_per_nautical_mile()*delta_minutes/60 ) * scale  as y_key,
        y  * scale  as y_key, # because using interpolated position, already centered at this location
        # Map these values to the values in the probability rasters
        map_speed(speed) as speed_key,
        map_minutes(delta_minutes) as minute_key,
        map_label(label) as label_key
      from
        key_query_2
      )
    where abs(x_key) <=500 and abs(y_key) <=500
    ),

    # # --
    # # --
    -- Match to probability, and interpolate between
    -- the four closest values. This bilinear interpoloation
    -- in theory allows us to reduce the size of the raster we are joining on
    messages_with_probabilities as
     (
     select
    --   -- this would get the value exact, the weight_scaled
    --   -- / pow((1000/(colmax( 1, probs.minutes_lower/2 + probs.minutes_upper /2))),2) * scale*scale
       * except(i,j,probability),
       bilinear_interpolation(
       ifnull(probs_11.probability,0),
       ifnull(probs_12.probability,0),
       ifnull(probs_22.probability,0),
       ifnull(probs_21.probability,0),
       cast(x_key - .5 as int64), cast(x_key + .5 as int64),
       cast(y_key - .5 as int64), cast(y_key + .5 as int64) ,
       x_key, y_key) as probability
    --   -- to get at least one value.
    --   -- weight *should* be the same for each, but we need to make sure it isn't null
     from
       key_query_3
     left join
    -- joining on four locaitons to do bilinear interpolation
     probabilities_and_weights_neg  as probs_11
       on  probs_11.i = cast(x_key - .5 as int64) and probs_11.j = cast(y_key - .5 as int64)
       and probs_11.speed_lower = cast(speed_key as int64)
       and probs_11.minutes_lower = cast(minute_key as int64)
       and probs_11.labels = label_key
     left join
     probabilities_and_weights_neg  as probs_12
       on  probs_12.i = cast(x_key -.5 as int64) and probs_12.j = cast(y_key + .5 as int64)
       and probs_12.speed_lower = cast(speed_key as int64)
       and probs_12.minutes_lower = cast(minute_key as int64)
       and probs_12.labels = label_key
     left join
     probabilities_and_weights_neg  as probs_22
       on  probs_22.i = cast(x_key +.5 as int64) and probs_22.j = cast(y_key + .5 as int64)
       and probs_22.speed_lower = cast(speed_key as int64)
       and probs_22.minutes_lower = cast(minute_key as int64)
       and probs_22.labels = label_key
     left join
     probabilities_and_weights_neg  as probs_21
       on  probs_21.i = cast(x_key +.5 as int64) and probs_21.j = cast(y_key - .5 as int64)
       and probs_21.speed_lower = cast(speed_key as int64)
       and probs_21.minutes_lower = cast(minute_key as int64)
       and probs_21.labels = label_key
     ),



    prob_multiplied_table as
    (
      select
      lat_bin,
      lon_bin,
      min_lon,
      min_lat,
      ifnull(a.pixels_per_degree, b.pixels_per_degree) pixels_per_degree,
      ifnull(a.pixels_per_degree_lon, b.pixels_per_degree_lon) pixels_per_degree_lon,
      greatest(a.scale, b.scale) scale, -- the largest scale is the one that was used
      ifnull(a.ssvid, b.ssvid) ssvid,
      ifnull(a.scene_id, b.scene_id) scene_id,
     -- if( greatest(a.scale, b.scale) <100,
      --   a.probability*b.probability,
      --   a.probability+b.probability)
      a.probability*b.probability   probability,
         -- if the scale is < 100, the time to the closest
         -- ping is greater than 10 minutes. Add probabilities and renormalize if the time is over
         -- 10 minutes, otherwise add
      a.detect_lat,
      a.detect_lon
      from messages_with_probabilities a
      join
      messages_with_probabilities b
      using(ssvid, lat_bin, lon_bin, min_lon, min_lat)
      where b.delta_minutes < a.delta_minutes
      union all
      select
      lat_bin,
      lon_bin,
      min_lon,
      min_lat,
      pixels_per_degree,
      pixels_per_degree_lon,
      scale,
      ssvid,
      scene_id,
      probability,
      detect_lat,
      detect_lon
      from
      messages_with_probabilities
      where is_single
    ),

   normalized_prob as (
   select * except (probability),
   probability/prob_sum*(scale*scale) probability, --
   (detect_lon-min_lon)*pixels_per_degree_lon as xr,
   (detect_lat-min_lat)*pixels_per_degree as yr,
   cast(round((detect_lon-min_lon)*pixels_per_degree_lon) as int64) as x,
   cast(round((detect_lat-min_lat)*pixels_per_degree) as int64) as y,
   from
   prob_multiplied_table
   join
   (select ssvid, scene_id, sum(probability) prob_sum from prob_multiplied_table
    group by ssvid, scene_id)
    using(ssvid,scene_id) ),

detections_ssvids as (select distinct a.detect_id, scene_id, b.ssvid,
    cast(round((detect_lat-min_lat)*pixels_per_degree) as int64) as y_key,
    cast(round((detect_lon-min_lon)*pixels_per_degree*cos(radians(min_lat/2+max_lat/2))) as int64) as x_key
    from
       `world-fishing-827.proj_walmart_dark_targets.all_detections_and_ais_v20210326`  a
     join just_bounds_label b
     using(scene_id)
     where detect_lat between min_lat and max_lat
     and detect_lon between min_lon and max_lon
     and detect_id is not null
     -- and scene_id = 'RS2_20190924_150552_0074_DVWF_HH_SCS_759668_9852_29818072'
   ),




scored_detects as (
select
a.scene_id scene_id,
a.ssvid,
"AIS" as source,
detect_id,
--        bilinear_interpolation(
--        ifnull(probs_11.probability,0),
--        ifnull(probs_12.probability,0),
--        ifnull(probs_22.probability,0),
--        ifnull(probs_21.probability,0),
--        cast(round(x_key - .5) as int64), cast(round(x_key + .5) as int64),
--        cast(round(y_key - .5) as int64), cast(round(y_key + .5) as int64) ,
--        x_key, y_key) as
       probability as score

from
detections_ssvids a
left join
normalized_prob as probs_11
on cast(round(y_key) as int64) = probs_11.y
and cast(round(x_key) as int64) = probs_11.x
and a.scene_id = probs_11.scene_id and a.ssvid = probs_11.ssvid
-- left join
-- normalized_prob as probs_12
-- on cast(round(y_key+.5) as int64) = probs_12.y
-- and cast(round(x_key-.5) as int64) = probs_12.x
-- and a.scene_id = probs_12.scene_id and a.ssvid = probs_12.ssvid
-- left join
-- normalized_prob as probs_22
-- on cast(round(y_key+.5) as int64) = probs_22.y
-- and cast(round(x_key+.5) as int64) = probs_22.x
-- and a.scene_id = probs_22.scene_id and a.ssvid = probs_22.ssvid
-- left join
-- normalized_prob as probs_21
-- on cast(round(y_key-.5) as int64) = probs_21.y
-- and cast(round(x_key+.5) as int64) = probs_21.x
-- and a.scene_id = probs_21.scene_id and a.ssvid = probs_21.ssvid
)

select * from scored_detects where score > 0
